package problems.page1

import base.Problem

object Problem8 : Problem{

  fun greatestProductQueue(numDigits: Long): Long {
    val productNumbers = ArrayDeque<Long>()
    var maximumProduct = 0L

    for(x in bigNumber.indices) {
      if(productNumbers.size.toLong() == numDigits) {
        val currentProduct = productNumbers.fold(1L) {product, element -> product * element}
        if (maximumProduct < currentProduct) {
          maximumProduct = currentProduct
        }
        productNumbers.removeFirst()
      }
      productNumbers.addLast(Character.getNumericValue(bigNumber[x]).toLong())
    }
    return maximumProduct
  }

  private const val bigNumber =
    "73167176531330624919225119674426574742355349194934969835203127745063262395783180169848" +
        "0186947885184385861560789112949495459501737958331952853208805511125406987471585238" +
        "6305071569329096329522744304355766896648950445244523161731856403098711121722383113" +
        "6222989342338030813533627661428280644448664523874930358907296290491560440772390713" +
        "8105158593079608667017242712188399879790879227492190169972088809377665727333001053" +
        "3678812202354218097512545405947522435258490771167055601360483958644670632441572215" +
        "5397536978179778461740649551492908625693219784686224828397224137565705605749026140" +
        "7972968652414535100474821663704844031998900088952434506585412275886668811642717147" +
        "9924442928230863465674813919123162824586178664583591245665294765456828489128831426" +
        "0769004224219022671055626321111109370544217506941658960408071984038509624554443629" +
        "8123098787992724428490918884580156166097919133875499200524063689912560717606058861" +
        "1646710940507754100225698315520005593572972571636269561882670428252483600823257530" +
        "420752963450"

  override fun getNumber(): String {
    return "8"
  }

  override fun getDescription(): String {
    return """
The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450

Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
    """.trimIndent()
  }

  override fun solve(): String {
    return greatestProductQueue(13).toString()
  }
}